class Helper{
    static blockingInterval;
    static blockingIntervalResult;

    //start 'blockingInterval' to await for result from the modal
    static awaitImageChooserModalResult(){
        return new Promise((resolve)=>{
            Helper.blockingInterval=setInterval(()=>{
                if(Helper.blockingIntervalResult!=null){
                    clearInterval(Helper.blockingInterval);
                    resolve(Helper.blockingIntervalResult);
                    Helper.blockingIntervalResult=null;
                }
            },300);
        });
    }
    static resolveBlockingInterval(res){
        Helper.blockingIntervalResult=res;
    }

    //get random id
    static randID(){return Math.floor(Math.random()*1000000);}

    //get image data url from an image object
    static getImageUrl(image){
        const can=document.createElement('canvas');
        const cc=can.getContext('2d');
        can.width=image.width;
        can.height=image.height;
        cc.drawImage(image,0,0);
        const dataURL=can.toDataURL();
        can.remove();
        return dataURL;
    }

    //convert Date to diffForHumans format(this function was generated by chatgpt :P)
    static diffForHumans(date){
        const now=new Date();
        const seconds=Math.floor((now-date)/1000);
        const minute=60;
        const hour=60*minute;
        const day=24*hour;
        const week=7*day;
        const month=30*day;
        const year=365*day;
        if (seconds < minute) {
            return "just now";
        } else if (seconds < 2 * minute) {
            return "a minute ago";
        } else if (seconds < hour) {
            return `${Math.floor(seconds / minute)} minutes ago`;
        } else if (seconds < 2 * hour) {
            return "an hour ago";
        } else if (seconds < day) {
            return `${Math.floor(seconds / hour)} hours ago`;
        } else if (seconds < 2 * day) {
            return "yesterday";
        } else if (seconds < week) {
            return `${Math.floor(seconds / day)} days ago`;
        } else if (seconds < 2 * week) {
            return "last week";
        } else if (seconds < month) {
            return `${Math.floor(seconds / week)} weeks ago`;
        } else if (seconds < 2 * month) {
            return "last month";
        } else if (seconds < year) {
            return `${Math.floor(seconds / month)} months ago`;
        } else if (seconds < 2 * year) {
            return "last year";
        } else {
            return `${Math.floor(seconds / year)} years ago`;
        }
    }

    //email regex check
    static checkEmail(email){
        const re=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    }

}

export default Helper;
